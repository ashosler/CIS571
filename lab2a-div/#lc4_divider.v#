/* 
Names: Allison Hosler and Antaures Jackson
Pennkeys: ashosler and ajj4311
 */

`timescale 1ns / 1ps
`default_nettype none

//simpler implementation of lc4_divider_one_iter, requires less shifts and less bits per iteration                                            
module div_i(input wire dn,
             input wire [15:0]  ds,
             input wire [15:0]  i_r,
             output wire q,
             output wire [15:0] o_r);
   wire [15:0] r_shift;
   wire [15:0] r_sub;

   assign r_shift = i_r << 1 | dn;
   assign r_sub = r_shift - ds;

   assign q = r_sub < 0 ? 1'b0 :  1'b1;
   assign o_r = r_sub < 0 ? r_shift : r_sub;
endmodule


module lc4_divider(input  wire [15:0] i_dividend,
                   input  wire [15:0] i_divisor,
                   output wire [15:0] o_remainder,
                   output wire [15:0] o_quotient);
   integer i;
   wire [15:0] q;
   wire [15:0] r_i [16:0];
   assign r_i[0] = 16'b0;
     
   initial begin
      for (i = 1; i <= 16; i = i + 1) begin
	 div_i d1 (.dn(i_dividend[16-i]),
		   .ds(i_divisor),
		   .i_r(r_i[i-1]),
		   .q(q[16-i]),
		   .o_r(r_i[i]));
      end
   end
   
   assign o_remainder = r_i[16];
   assign o_quotient = i_divisor > 0 ? q : 16'b0;
endmodule // lc4_divider

//simpler implementation of lc4_divider_one_iter, requires less shifts and less bits per iteration
module div_i(input wire dn,
	     i

module lc4_divider_one_iter(input wire [15:0] i_dividend,
                            input wire [15:0] i_divisor,
                            input wire [15:0] i_remainder,
                            input wire [15:0] i_quotient,
			    
                            output wire [15:0] o_dividend,
                            output wire [15:0] o_remainder,
                            output wire [15:0] o_quotient);

   wire [15:0] r_shift;
   wire [15:0] r_sub;
   wire select;

   assign r_shift = i_remainder << 1 | i_dividend >> 15;
   assign select = r_shift < i_divisor;
   assign r_sub = r_shift - i_divisor;
      
   assign o_quotient = select ? (i_quotient << 1) : (i_quotient << 1 | 16'b1);   
   assign o_remainder = select ? r_shift : r_sub;
   assign o_dividend = i_dividend << 1;
   
endmodule
